# 1.a Load the tidyverse package and the dplyr package
install.packages("tidyverse")
library("tidyverse")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
# 1.b Load the *national level* data from the following URL into a variable
# called `national`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
# 1.c Load the *state level* data from the following URL into a variable called
# `states`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv")
# 1.d Load the *county level* data from the following URL into a variable called
# `counties`
# NOTE: This is a large dataset. It may take 30-60 seconds to load.
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv
counties <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv")
# 1.e How many observations (rows) are in each dataset?
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- nrow(national)
obs_states <- nrow(states)
obs_counties <- nrow(counties)
# 1.f How many features (columns) are there in each dataset?
# Create `num_features_national`, `num_features_states`, `num_features_counties`
num_features_national <- ncol(national)
num_features_states <- ncol(states)
num_features_counties <- ncol(counties)
# 2.a How many total COVID cases have there been in the U.S. by the most recent
# date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>%
dplyr::filter(date == last(date)) %>%
pull(cases)
# 2.b How many total COVID-related deaths have there been in the U.S. by the
# most recent date in the dataset? Make sure to pull() this number
# `total_us_deaths`
total_us_deaths <- national %>%
dplyr::filter(date == last(date)) %>%
pull(deaths)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull()
# this value `state_highest_cases`
state_highest_cases <- states %>%
dplyr::filter(date == last(date)) %>%
pull(cases)
# 2.d What is the highest number of cases in a state? Make sure to pull() this
# number `num_highest_state`
num_highest_state <- states %>%
dplyr::filter(cases == max(states$cases)) %>%
pull(cases)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of
# the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this:
# `state_highest_ratio`
state_highest_ratio <- states %>%
dplyr::filter(date == last(date)) %>%
dplyr::filter(deaths / cases == max(deaths / cases)) %>%
pull(state)
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>%
dplyr::filter(date == last(date)) %>%
dplyr::filter(cases == min(cases)) %>%
pull(cases)
# 2.g What is the highest number of cases that have happened in a single county?
# Make sure to pull() this NUMBER `num_highest_cases_county`
num_highest_cases_county <- counties %>%
dplyr::filter(cases == max(counties$cases)) %>%
pull(cases)
# 2.h Which county had this highest number of cases? Make sure to pull() this
# COUNTY `county_highest_cases`
county_highest_cases <- counties %>%
dplyr::filter(cases == max(counties$cases)) %>%
pull(county)
# 2.i Because there are multiple counties with the same name across states, it
# will be helpful to have a column that stores the county and state together, in
# this form: "COUNTY, STATE".
# Therefore, add a new column to your `counties` data frame called `location`
# that stores the county and state (separated by a comma and space).
counties <- counties %>%
mutate(location = paste(county, state, sep = ", "))
# 2.j What is the name of the location (county, state) with the highest number
# of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>%
dplyr::filter(deaths == max(deaths, na.rm = TRUE)) %>%
pull(location)
# 2.k Add a new column to your `national` data frame called `new_cases` â€” that
# is, the number new cases each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>%
dplyr::mutate(new_cases = cases - dplyr::lag(cases, default = 0))
# 2.l Similarly, the `deaths` columns is *not* the number of new deaths per day.
# Add  a new column to the `national` data frame called `new_deaths` that has
# the number of *new* deaths each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>%
dplyr::mutate(new_deaths = deaths - dplyr::lag(deaths, default = 0))
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure
# to pull() this value `date_most_cases`
date_most_cases <- national %>%
dplyr::filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure
# to pull() this value `date_most_deaths`
date_most_deaths <- national %>%
dplyr::filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(date)
# 2.o How many people died on the date when the most deaths occurred? Make sure
# to pull() this value `most_deaths`
most_deaths <- national %>%
dplyr::filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(new_deaths)
# You can plot this data with built-in plot functions
plot(national$new_cases)
plot(national$new_deaths)
# 3.a For each state, what is the county with the highest number of COVID cases?
# Make a dataframe that has every state and the county with the highest number
# of cases and corresponding rows (hint: you will need to use a grouping
# operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
ungroup()
highest_cases_in_each_state
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases?
# Make a dataframe that has every state and the county with the highest number
# of cases and corresponding rows (hint: you will need to use a grouping
# operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases?
# Make a dataframe that has every state and the county with the highest number
# of cases and corresponding rows (hint: you will need to use a grouping
# operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
arrange(state, desc(cases), desc(date))
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases?
# Make a dataframe that has every state and the county with the highest number
# of cases and corresponding rows (hint: you will need to use a grouping
# operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
arrange(state, desc(cases), desc(date))
View(highest_cases_in_each_state)
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases?
# Make a dataframe that has every state and the county with the highest number
# of cases and corresponding rows (hint: you will need to use a grouping
# operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
arrange(state, desc(cases), desc(date))
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases?
# Make a dataframe that has every state and the county with the highest number
# of cases and corresponding rows (hint: you will need to use a grouping
# operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
arrange(state, desc(cases), desc(date)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
select(state, county, cases, date)
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases?
# Make a dataframe that has every state and the county with the highest number
# of cases and corresponding rows (hint: you will need to use a grouping
# operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
arrange(state, desc(cases)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
select(state, county, cases, date)
View(highest_cases_in_each_state)
# 3.b For each state, what is the county with the lowest number of COVID-related
# deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of
# deaths and corresponding rows (hint: you will need to use a grouping operation
# and a filter)
# Save as `lowest_deaths_in_each_state
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == min(deaths, na.rm = TRUE)) %>%
arrange(state, desc(deaths)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
select(state, county, deaths, date)
View(lowest_deaths_in_each_state)
View(counties)
# 3.b For each state, what is the county with the lowest number of COVID-related
# deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of
# deaths and corresponding rows (hint: you will need to use a grouping operation
# and a filter)
# Save as `lowest_deaths_in_each_state
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == min(deaths, na.rm = TRUE)) %>%
arrange(state, desc(deaths)) %>%
# filter(row_number() == 1) %>%
ungroup() %>%
select(state, county, deaths, date)
View(lowest_deaths_in_each_state)
# 3.b For each state, what is the county with the lowest number of COVID-related
# deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of
# deaths and corresponding rows (hint: you will need to use a grouping operation
# and a filter)
# Save as `lowest_deaths_in_each_state
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == min(deaths, na.rm = TRUE)) %>%
arrange(state, desc(deaths)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
select(state, county, deaths, date)
# 3.b For each state, what is the county with the lowest number of COVID-related
# deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of
# deaths and corresponding rows (hint: you will need to use a grouping operation
# and a filter)
# Save as `lowest_deaths_in_each_state
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == min(deaths, na.rm = TRUE)) %>%
arrange(state, desc(deaths)) %>%
top_n(1, wt = deaths) %>%
ungroup() %>%
select(state, county, deaths, date)
View(lowest_deaths_in_each_state)
# 3.b For each state, what is the county with the lowest number of COVID-related
# deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of
# deaths and corresponding rows (hint: you will need to use a grouping operation
# and a filter)
# Save as `lowest_deaths_in_each_state
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == min(deaths, na.rm = TRUE)) %>%
arrange(state, desc(deaths)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
select(state, county, deaths, date)
# 3.b For each state, what is the county with the lowest number of COVID-related
# deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of
# deaths and corresponding rows (hint: you will need to use a grouping operation
# and a filter)
# Save as `lowest_deaths_in_each_state
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(deaths == min(deaths, na.rm = TRUE)) %>%
arrange(state, desc(deaths)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
select(state, county, deaths, date)
View(lowest_deaths_in_each_state)
# 3.b For each state, what is the county with the lowest number of COVID-related
# deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of
# deaths and corresponding rows (hint: you will need to use a grouping operation
# and a filter)
# Save as `lowest_deaths_in_each_state
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(deaths == min(deaths, na.rm = TRUE)) %>%
arrange(state, desc(date), deaths) %>%
filter(row_number() == 1) %>%
ungroup() %>%
select(state, county, deaths, date)
View(lowest_deaths_in_each_state)
View(lowest_deaths_in_each_state)
# 3.b For each state, what is the county with the lowest number of COVID-related
# deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of
# deaths and corresponding rows (hint: you will need to use a grouping operation
# and a filter)
# Save as `lowest_deaths_in_each_state
lowest_deaths_in_each_state <- counties %>%
arrange(state, desc(date), deaths) %>%
group_by(state) %>%
# filter(deaths == min(deaths, na.rm = TRUE)) %>%
filter(row_number() == 1) %>%
ungroup() %>%
select(state, county, deaths, date)
View(lowest_deaths_in_each_state)
# 3.b For each state, what is the county with the lowest number of COVID-related
# deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of
# deaths and corresponding rows (hint: you will need to use a grouping operation
# and a filter)
# Save as `lowest_deaths_in_each_state
lowest_deaths_in_each_state <- counties %>%
arrange(state, desc(date), deaths) %>%
group_by(state) %>%
filter(row_number() == 1) %>%
ungroup() %>%
select(state, county, deaths, date)
View(lowest_deaths_in_each_state)
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases
# for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>%
group_by(date) %>%
summarise(county_total_cases = sum(cases, na.rm = TRUE))
View(total_cases_counties)
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- left_join(national, total_cases_counties)
View(all_totals)
# 4.c Filter the all_totals dataframe to find only the rows where the
# "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases)
View(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
#  Write code (at least 2-3 lines) that will answer your question
total_deaths_king_county <- counties %>%
filter(state == "Washington", county == "King") %>%
summarise(total_deaths = sum(deaths, na.rm = TRUE))
View(total_deaths_king_county)
#  Write code (at least 2-3 lines) that will answer your question
total_deaths_king_county <- counties %>%
filter(state == "Washington", county == "King") %>%
summarise(total_deaths = sum(deaths, na.rm = TRUE))
#  Write code (at least 2-3 lines) that will answer your question
total_deaths_king_county <- counties %>%
filter(state == "Washington" & county == "King") %>%
summarise(total_deaths = sum(deaths, na.rm = TRUE))
View(total_deaths_king_county)
#  Write code (at least 2-3 lines) that will answer your question
total_deaths_king_county <- counties %>%
filter(state == "Washington", county == "King") %>%
summarise(total_deaths = sum(deaths, na.rm = TRUE))
#  Write code (at least 2-3 lines) that will answer your question
king_county_data <- counties[counties$state == "Washington" & counties$county == "King"]
total_deaths_king_county <- aggregate(deaths ~ date, data = king_county_data, sum, na.rm = TRUE)
View(total_deaths_king_county)
#  Write code (at least 2-3 lines) that will answer your question
total_deaths_king_county <- counties %>%
filter(state == "Washington", county = "King") %>%
group_by(date) %>%
summarise(king_county_deaths = sum(deaths, na.rm = TRUE))
#  Write code (at least 2-3 lines) that will answer your question
total_deaths_king_county <- counties %>%
filter(state == "Washington", county == "King") %>%
group_by(date) %>%
summarise(king_county_deaths = sum(deaths, na.rm = TRUE))
View(total_deaths_king_county)
#  Write code (at least 2-3 lines) that will answer your question
total_deaths_king_county <- counties %>%
filter(state == "Washington", county == "King") %>%
summarise(king_county_deaths = sum(deaths, na.rm = TRUE))
View(total_deaths_king_county)
#  Write code (at least 2-3 lines) that will answer your question
total_deaths_king_county <- counties %>%
filter(state == "Washington", county == "King") %>%
group_by(date) %>%
summarise(king_county_deaths = sum(deaths, na.rm = TRUE))
View(total_deaths_king_county)
shiny::runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
View(data)
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
View(depression_data)
library(readr)
depressionrates <- read_csv("C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun/depressionrates.csv")
View(depressionrates)
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
runApp('C:/Users/Susruthi/OneDrive/Desktop/INFO 201 Files/final-deliverable-p03-lea-sun')
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
